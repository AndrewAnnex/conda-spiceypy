diff --git a/appveyor/makeDynamicSpice.bat b/appveyor/makeDynamicSpice.bat
index 9396a5f..5c7fd46 100644
--- a/appveyor/makeDynamicSpice.bat
+++ b/appveyor/makeDynamicSpice.bat
@@ -8,7 +8,7 @@ rem    Specifically cl.exe and link.exe .
 rem
 rem
 @echo on
-rem Running makeDynamicSpice.bat, this may take some time (a minute or two) ...
+rem Running makeDynamicSpice.bat, ZZZ this may take some time (a minute or two) ...
 @echo off
 
 set cl= /c /O2 /nologo -D_COMPLEX_DEFINED -DMSDOS -DOMIT_BLANK_CC -DNON_ANSI_STDIO
@@ -39,11 +39,9 @@ cl zzsecprt.c >nul
 dir /b *.obj > temp.lst
 @echo on
 rem Finished Compiling, starting to Link spice.
-@echo off
 rem
 rem Create cspice.dll
 rem
 
 link /DLL /OUT:cspice.dll /DEF:cspice.def /IMPLIB:cspice.lib @temp.lst >nul
-@echo on
 rem Finished Linking Spice, makeDynamicSpice.bat completed.
diff --git a/setup.py b/setup.py
index c2b6446..dbd6f0e 100644
--- a/setup.py
+++ b/setup.py
@@ -97,37 +97,61 @@ def build_library():
         finally:
             os.chdir(currentDir)
     elif host_OS == "Windows":
+        print("IN BUILD setup.py spice")
         currentDir = os.getcwd()
+        destination = os.path.join(cspice_dir, "src", "cspice")
         try:
-            destination = os.path.join(cspice_dir, "src", "cspice")
             defFile = os.path.join(root_dir, "appveyor", "cspice.def")
             makeBat = os.path.join(root_dir, "appveyor", "makeDynamicSpice.bat")
             shutil.copy(defFile, destination)
             shutil.copy(makeBat, destination)
             # run the script
             os.chdir(destination)
+            print("about to run make dynamic")
             windows_build = subprocess.Popen("makeDynamicSpice.bat", shell=True)
             status = windows_build.wait()
+            print("finished make dynamic")
+            print("STATUS CODE: ", str(status))
             if status != 0:
                 raise BaseException('{0}'.format(status))
         except BaseException as error:
+            print("RAN INTO EXCEPTION: ", error)
             sys.exit("Build failed with: {0}".format(error.args))
             pass
         finally:
+            print("Does cspice.dll exist where we think it does after building?: ", os.listdir(destination))
             os.chdir(currentDir)
 
 
 def move_to_root_directory():
     sharedLib = 'spice.so' if host_OS == "Linux" or host_OS == "Darwin" else 'cspice.dll'
     destination = os.path.join(root_dir, 'spiceypy', 'utils', sharedLib)
+    win_destination = os.path.join(root_dir, 'spiceypy', 'utils')
     if not os.path.isfile(destination):
         try:
             if host_OS == "Linux" or host_OS == "Darwin":
                 os.rename(os.path.join(cspice_dir, 'lib', 'spice.so'), destination)
             elif host_OS == "Windows":
+
+                print("")
+                print("")
+                print("####################################################")
+                print("in move_to_root for windows")
+                print("cspice_dir: " + cspice_dir)
+                print("destination: " + destination)
+                print("")
+                print("####################################################")
+                where_we_think_it_is = os.path.join(cspice_dir, 'src', 'cspice')
+                where_we_think_it_is_cspice = os.path.join(cspice_dir, 'src', 'cspice', 'cspice.dll')
+                print("Does cspice.dll exist where we think it does? {}".format(os.path.exists(where_we_think_it_is_cspice)))
+                print("What is in where we think it is: ", [x for x in os.listdir(where_we_think_it_is)])
+                print("current contents in destination: ", [x for x in os.listdir(win_destination)])
                 os.rename(os.path.join(cspice_dir, 'src', 'cspice', 'cspice.dll'), destination)
         except BaseException as e:
             sys.exit('{0} file not found, what happend?: {1}'.format(sharedLib, e))
+        finally:
+            print("we should have moved cspice.dll or cspice.so to the right spot")
+            print([x for x in os.listdir(win_destination)])
 
 
 def cleanup():
@@ -160,7 +184,9 @@ def windows_method():
             return
         else:
             # Build the DLL
+            print('IN WINDOWS METHOD')
             build_library()
+            print("OUTSIDE BUIOLD_LIBRARY")
             # Move to correct location (root of the distribution)
             move_to_root_directory()
 
